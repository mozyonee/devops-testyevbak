name: CI/CD
on:
  push: { branches: [main] }
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/devops-test:latest

jobs:
  build-and-push:
    runs-on: Linux
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/devops-test:latest
            ghcr.io/${{ github.repository_owner }}/devops-test:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify cluster connection
        run: |
          mkdir -p ~/.kube
        
          sudo cp /home/adaptrix/.kube/config ~/.kube/config
          
          sudo chown runner:runner ~/.kube/config
          chmod 600 ~/.kube/config

          whoami
          echo "Home: $HOME"
          echo "Current working directory: $(pwd)"
          ls -la ~/.kube/ || echo "No .kube directory"
          kind get clusters || echo "KIND not found"
          which kubectl


          kind export kubeconfig --name adaptrix-cluster
          kubectl cluster-info
          kubectl get nodes
      - name: Install NGINX Ingress (if needed1)
        run: |
          if ! kubectl get namespace ingress-nginx >/dev/null 2>&1; then
            echo "Installing NGINX Ingress..."
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/kind/deploy.yaml
            kubectl -n ingress-nginx rollout status deploy/ingress-nginx-controller --timeout=180s
          else
            echo "NGINX Ingress already installed"
          fi
      - name: Apply manifests
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl -n mustage apply -f k8s/redis-secret.yaml -f k8s/redis-deployment.yaml -f k8s/redis-service.yaml
          kubectl -n mustage apply -f k8s/app-config.yaml -f k8s/app-deployment.yaml -f k8s/app-service.yaml
          kubectl -n mustage apply -f k8s/ingress.yaml
      - name: Patch image and rollout
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          kubectl -n mustage patch deploy nest-app -p '{"spec":{"template":{"spec":{"containers":[{"name":"app","imagePullPolicy":"Always"}]}}}}'
          kubectl -n mustage set image deploy/nest-app app=$IMAGE
          kubectl -n mustage rollout status deploy/nest-app --timeout=180s
      - name: Debug NGINX Ingress
        if: failure()
        run: |
          kubectl -n ingress-nginx get pods
          kubectl -n ingress-nginx describe pods
          kubectl -n ingress-nginx get events --sort-by='.lastTimestamp'
